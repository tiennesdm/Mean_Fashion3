/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';
import { Observable, BehaviorSubject, of, concat, from } from 'rxjs';
import { PpBreadcrumbsResolver } from './breadcrumbs.resolver';
import { filter, mergeMap, distinct, toArray, first } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
export class PpBreadcrumbsService {
    /**
     * @param {?} router
     * @param {?} route
     * @param {?} injector
     */
    constructor(router, route, injector) {
        this.router = router;
        this.injector = injector;
        this.breadcrumbs = new BehaviorSubject([]);
        this.defaultResolver = new PpBreadcrumbsResolver();
        this.router.events.pipe(filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x instanceof NavigationEnd))).subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.resolveCrumbs(router.routerState.snapshot.root)
                .pipe(mergeMap((/**
             * @param {?} breadcrumbs
             * @return {?}
             */
            breadcrumbs => breadcrumbs)), distinct((/**
             * @param {?} breadcrumb
             * @return {?}
             */
            breadcrumb => breadcrumb.text)), toArray(), mergeMap((/**
             * @param {?} breadcrumbs
             * @return {?}
             */
            breadcrumbs => {
                return this.postProcess ? this.wrapIntoObservable(this.postProcess(breadcrumbs)).pipe(first()) : of(breadcrumbs);
            })))
                .subscribe((/**
             * @param {?} breadcrumbs
             * @return {?}
             */
            breadcrumbs => {
                this.breadcrumbs.next(breadcrumbs);
            }));
        }));
    }
    /**
     * @return {?}
     */
    get crumbs$() {
        return this.breadcrumbs;
    }
    /**
     * @private
     * @param {?} route
     * @return {?}
     */
    resolveCrumbs(route) {
        /** @type {?} */
        let crumbs$ = of([]);
        /** @type {?} */
        const data = route.routeConfig && route.routeConfig.data;
        if (data && data.breadcrumbs) {
            /** @type {?} */
            const resolver = data.breadcrumbs.prototype instanceof PpBreadcrumbsResolver ? this.injector.get(data.breadcrumbs) : this.defaultResolver;
            /** @type {?} */
            const result = resolver.resolve(route, this.router.routerState.snapshot);
            crumbs$ = this.wrapIntoObservable(result).pipe(first());
        }
        return route.firstChild ? concat(crumbs$, this.resolveCrumbs(route.firstChild)) : crumbs$;
    }
    /**
     * @private
     * @template T
     * @param {?} value
     * @return {?}
     */
    wrapIntoObservable(value) {
        return value instanceof Observable ? value : this.isPromise(value) ? from(Promise.resolve(value)) : of((/** @type {?} */ (value)));
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    isPromise(value) {
        return value && typeof value.then === 'function';
    }
}
PpBreadcrumbsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
PpBreadcrumbsService.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: Injector }
];
/** @nocollapse */ PpBreadcrumbsService.ngInjectableDef = i0.defineInjectable({ factory: function PpBreadcrumbsService_Factory() { return new PpBreadcrumbsService(i0.inject(i1.Router), i0.inject(i1.ActivatedRoute), i0.inject(i0.INJECTOR)); }, token: PpBreadcrumbsService, providedIn: "root" });
if (false) {
    /** @type {?} */
    PpBreadcrumbsService.prototype.postProcess;
    /**
     * @type {?}
     * @private
     */
    PpBreadcrumbsService.prototype.breadcrumbs;
    /**
     * @type {?}
     * @private
     */
    PpBreadcrumbsService.prototype.defaultResolver;
    /**
     * @type {?}
     * @private
     */
    PpBreadcrumbsService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    PpBreadcrumbsService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3BwLWJyZWFkY3J1bWJzLyIsInNvdXJjZXMiOlsibGliL2JyZWFkY3J1bWJzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxjQUFjLEVBQTBCLGFBQWEsRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRyxPQUFPLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVyRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFNNUUsTUFBTSxPQUFPLG9CQUFvQjs7Ozs7O0lBVy9CLFlBQW9CLE1BQWMsRUFBRSxLQUFxQixFQUFVLFFBQWtCO1FBQWpFLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBaUMsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQVA3RSxnQkFBVyxHQUFHLElBQUksZUFBZSxDQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELG9CQUFlLEdBQUcsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO1FBT3BELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksYUFBYSxFQUFDLENBQUMsQ0FBQyxTQUFTOzs7O1FBQUMsQ0FBQyxLQUFvQixFQUFFLEVBQUU7WUFDbEcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7aUJBQ2pELElBQUksQ0FDSCxRQUFROzs7O1lBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUMsRUFDcEMsUUFBUTs7OztZQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksRUFBQyxFQUN2QyxPQUFPLEVBQUUsRUFDVCxRQUFROzs7O1lBQUMsV0FBVyxDQUFDLEVBQUU7Z0JBQ3JCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ25ILENBQUMsRUFBQyxDQUNIO2lCQUNBLFNBQVM7Ozs7WUFBQyxXQUFXLENBQUMsRUFBRTtnQkFDdkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDckMsQ0FBQyxFQUFDLENBQUM7UUFDUCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFuQkQsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7Ozs7OztJQW1CTyxhQUFhLENBQUMsS0FBNkI7O1lBQzdDLE9BQU8sR0FBNkIsRUFBRSxDQUFDLEVBQUUsQ0FBQzs7Y0FDeEMsSUFBSSxHQUFHLEtBQUssQ0FBQyxXQUFXLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJO1FBRXhELElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7O2tCQUN0QixRQUFRLEdBQ1osSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLFlBQVkscUJBQXFCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWU7O2tCQUVwSCxNQUFNLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDO1lBQ3hFLE9BQU8sR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQWUsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDdkU7UUFFRCxPQUFPLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQzVGLENBQUM7Ozs7Ozs7SUFFTyxrQkFBa0IsQ0FBSSxLQUFxQztRQUNqRSxPQUFPLEtBQUssWUFBWSxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLG1CQUFBLEtBQUssRUFBSyxDQUFDLENBQUM7SUFDckgsQ0FBQzs7Ozs7O0lBRU8sU0FBUyxDQUFDLEtBQVU7UUFDMUIsT0FBTyxLQUFLLElBQUksT0FBTyxLQUFLLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQztJQUNuRCxDQUFDOzs7WUFwREYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBVCtELE1BQU07WUFBN0QsY0FBYztZQURGLFFBQVE7Ozs7O0lBYTNCLDJDQUF1Rzs7Ozs7SUFFdkcsMkNBQTREOzs7OztJQUM1RCwrQ0FBc0Q7Ozs7O0lBTTFDLHNDQUFzQjs7Ozs7SUFBeUIsd0NBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIE5hdmlnYXRpb25FbmQsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIEJlaGF2aW9yU3ViamVjdCwgb2YsIGNvbmNhdCwgZnJvbSB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgUHBCcmVhZGNydW1ic1Jlc29sdmVyIH0gZnJvbSAnLi9icmVhZGNydW1icy5yZXNvbHZlcic7XHJcbmltcG9ydCB7IGZpbHRlciwgbWVyZ2VNYXAsIGRpc3RpbmN0LCB0b0FycmF5LCBmaXJzdCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgQnJlYWRjcnVtYiB9IGZyb20gJy4vYnJlYWRjcnVtYic7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQcEJyZWFkY3J1bWJzU2VydmljZSB7XHJcblxyXG4gIHBvc3RQcm9jZXNzOiAoY3J1bWJzOiBCcmVhZGNydW1iW10pID0+IFByb21pc2U8QnJlYWRjcnVtYltdPiB8IE9ic2VydmFibGU8QnJlYWRjcnVtYltdPiB8IEJyZWFkY3J1bWJbXTtcclxuXHJcbiAgcHJpdmF0ZSBicmVhZGNydW1icyA9IG5ldyBCZWhhdmlvclN1YmplY3Q8QnJlYWRjcnVtYltdPihbXSk7XHJcbiAgcHJpdmF0ZSBkZWZhdWx0UmVzb2x2ZXIgPSBuZXcgUHBCcmVhZGNydW1ic1Jlc29sdmVyKCk7XHJcblxyXG4gIGdldCBjcnVtYnMkKCk6IE9ic2VydmFibGU8QnJlYWRjcnVtYltdPiB7XHJcbiAgICByZXR1cm4gdGhpcy5icmVhZGNydW1icztcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSwgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHtcclxuICAgIHRoaXMucm91dGVyLmV2ZW50cy5waXBlKGZpbHRlcih4ID0+IHggaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRW5kKSkuc3Vic2NyaWJlKChldmVudDogTmF2aWdhdGlvbkVuZCkgPT4ge1xyXG4gICAgICB0aGlzLnJlc29sdmVDcnVtYnMocm91dGVyLnJvdXRlclN0YXRlLnNuYXBzaG90LnJvb3QpXHJcbiAgICAgICAgLnBpcGUoXHJcbiAgICAgICAgICBtZXJnZU1hcChicmVhZGNydW1icyA9PiBicmVhZGNydW1icyksXHJcbiAgICAgICAgICBkaXN0aW5jdChicmVhZGNydW1iID0+IGJyZWFkY3J1bWIudGV4dCksXHJcbiAgICAgICAgICB0b0FycmF5KCksXHJcbiAgICAgICAgICBtZXJnZU1hcChicmVhZGNydW1icyA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBvc3RQcm9jZXNzID8gdGhpcy53cmFwSW50b09ic2VydmFibGUodGhpcy5wb3N0UHJvY2VzcyhicmVhZGNydW1icykpLnBpcGUoZmlyc3QoKSkgOiBvZihicmVhZGNydW1icyk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIClcclxuICAgICAgICAuc3Vic2NyaWJlKGJyZWFkY3J1bWJzID0+IHtcclxuICAgICAgICAgIHRoaXMuYnJlYWRjcnVtYnMubmV4dChicmVhZGNydW1icyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVzb2x2ZUNydW1icyhyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCk6IE9ic2VydmFibGU8QnJlYWRjcnVtYltdPiB7XHJcbiAgICBsZXQgY3J1bWJzJDogT2JzZXJ2YWJsZTxCcmVhZGNydW1iW10+ID0gb2YoW10pO1xyXG4gICAgY29uc3QgZGF0YSA9IHJvdXRlLnJvdXRlQ29uZmlnICYmIHJvdXRlLnJvdXRlQ29uZmlnLmRhdGE7XHJcblxyXG4gICAgaWYgKGRhdGEgJiYgZGF0YS5icmVhZGNydW1icykge1xyXG4gICAgICBjb25zdCByZXNvbHZlcjogUHBCcmVhZGNydW1ic1Jlc29sdmVyID1cclxuICAgICAgICBkYXRhLmJyZWFkY3J1bWJzLnByb3RvdHlwZSBpbnN0YW5jZW9mIFBwQnJlYWRjcnVtYnNSZXNvbHZlciA/IHRoaXMuaW5qZWN0b3IuZ2V0KGRhdGEuYnJlYWRjcnVtYnMpIDogdGhpcy5kZWZhdWx0UmVzb2x2ZXI7XHJcblxyXG4gICAgICBjb25zdCByZXN1bHQgPSByZXNvbHZlci5yZXNvbHZlKHJvdXRlLCB0aGlzLnJvdXRlci5yb3V0ZXJTdGF0ZS5zbmFwc2hvdCk7XHJcbiAgICAgIGNydW1icyQgPSB0aGlzLndyYXBJbnRvT2JzZXJ2YWJsZTxCcmVhZGNydW1iW10+KHJlc3VsdCkucGlwZShmaXJzdCgpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcm91dGUuZmlyc3RDaGlsZCA/IGNvbmNhdChjcnVtYnMkLCB0aGlzLnJlc29sdmVDcnVtYnMocm91dGUuZmlyc3RDaGlsZCkpIDogY3J1bWJzJDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgd3JhcEludG9PYnNlcnZhYmxlPFQ+KHZhbHVlOiBUIHwgUHJvbWlzZTxUPiB8IE9ic2VydmFibGU8VD4pOiBPYnNlcnZhYmxlPFQ+IHtcclxuICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIE9ic2VydmFibGUgPyB2YWx1ZSA6IHRoaXMuaXNQcm9taXNlKHZhbHVlKSA/IGZyb20oUHJvbWlzZS5yZXNvbHZlKHZhbHVlKSkgOiBvZih2YWx1ZSBhcyBUKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXNQcm9taXNlKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJztcclxuICB9XHJcbn1cclxuIl19