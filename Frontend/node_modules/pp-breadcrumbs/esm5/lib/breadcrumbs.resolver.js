/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { of } from 'rxjs';
import { Injectable } from '@angular/core';
import { template, templateSettings } from 'lodash';
templateSettings.interpolate = /{{([\s\S]+?)}}/g;
var PpBreadcrumbsResolver = /** @class */ (function () {
    function PpBreadcrumbsResolver() {
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    PpBreadcrumbsResolver.prototype.resolve = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        /** @type {?} */
        var data = route.routeConfig.data;
        /** @type {?} */
        var path = this.getFullPath(route);
        /** @type {?} */
        var rawText = typeof data.breadcrumbs === 'string' ? data.breadcrumbs : data.breadcrumbs.text || data.text || path;
        return of([
            {
                path: path,
                text: this.stringFormat(rawText, route.data)
            }
        ]);
    };
    /**
     * @param {?} route
     * @return {?}
     */
    PpBreadcrumbsResolver.prototype.getFullPath = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        /** @type {?} */
        var relativePath = (/**
         * @param {?} segments
         * @return {?}
         */
        function (segments) { return segments.reduce((/**
         * @param {?} a
         * @param {?} v
         * @return {?}
         */
        function (a, v) { return (a += '/' + v.path); }), ''); });
        /** @type {?} */
        var fullPath = (/**
         * @param {?} routes
         * @return {?}
         */
        function (routes) { return routes.reduce((/**
         * @param {?} a
         * @param {?} v
         * @return {?}
         */
        function (a, v) { return (a += relativePath(v.url)); }), ''); });
        return fullPath(route.pathFromRoot);
    };
    /**
     * @private
     * @param {?} templateString
     * @param {?} binding
     * @return {?}
     */
    PpBreadcrumbsResolver.prototype.stringFormat = /**
     * @private
     * @param {?} templateString
     * @param {?} binding
     * @return {?}
     */
    function (templateString, binding) {
        /** @type {?} */
        var compiled = template(templateString);
        return compiled(binding);
    };
    PpBreadcrumbsResolver.decorators = [
        { type: Injectable }
    ];
    return PpBreadcrumbsResolver;
}());
export { PpBreadcrumbsResolver };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYnMucmVzb2x2ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9wcC1icmVhZGNydW1icy8iLCJzb3VyY2VzIjpbImxpYi9icmVhZGNydW1icy5yZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUV0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFcEQsZ0JBQWdCLENBQUMsV0FBVyxHQUFHLGlCQUFpQixDQUFDO0FBRWpEO0lBQUE7SUEwQkEsQ0FBQzs7Ozs7O0lBdkJDLHVDQUFPOzs7OztJQUFQLFVBQVEsS0FBNkIsRUFBRSxLQUEwQjs7WUFDekQsSUFBSSxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSTs7WUFDN0IsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDOztZQUM5QixPQUFPLEdBQUcsT0FBTyxJQUFJLENBQUMsV0FBVyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJO1FBRXBILE9BQU8sRUFBRSxDQUFDO1lBQ1I7Z0JBQ0UsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsSUFBSSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUM7YUFDN0M7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUVELDJDQUFXOzs7O0lBQVgsVUFBWSxLQUE2Qjs7WUFDakMsWUFBWTs7OztRQUFHLFVBQUMsUUFBc0IsSUFBSyxPQUFBLFFBQVEsQ0FBQyxNQUFNOzs7OztRQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSyxPQUFBLENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQW5CLENBQW1CLEdBQUUsRUFBRSxDQUFDLEVBQWxELENBQWtELENBQUE7O1lBQzdGLFFBQVE7Ozs7UUFBRyxVQUFDLE1BQWdDLElBQUssT0FBQSxNQUFNLENBQUMsTUFBTTs7Ozs7UUFBQyxVQUFDLENBQUMsRUFBRSxDQUFDLElBQUssT0FBQSxDQUFDLENBQUMsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQTFCLENBQTBCLEdBQUUsRUFBRSxDQUFDLEVBQXZELENBQXVELENBQUE7UUFDOUcsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Ozs7Ozs7SUFFTyw0Q0FBWTs7Ozs7O0lBQXBCLFVBQXFCLGNBQXNCLEVBQUUsT0FBWTs7WUFDakQsUUFBUSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUM7UUFDekMsT0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0IsQ0FBQzs7Z0JBekJGLFVBQVU7O0lBMEJYLDRCQUFDO0NBQUEsQUExQkQsSUEwQkM7U0F6QlkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUmVzb2x2ZSwgUm91dGVyU3RhdGVTbmFwc2hvdCwgVXJsU2VnbWVudCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEJyZWFkY3J1bWIgfSBmcm9tICcuL2JyZWFkY3J1bWInO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IHRlbXBsYXRlLCB0ZW1wbGF0ZVNldHRpbmdzIH0gZnJvbSAnbG9kYXNoJztcclxuXHJcbnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGUgPSAve3soW1xcc1xcU10rPyl9fS9nO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgUHBCcmVhZGNydW1ic1Jlc29sdmVyIGltcGxlbWVudHMgUmVzb2x2ZTxCcmVhZGNydW1iW10+IHtcclxuXHJcbiAgcmVzb2x2ZShyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QpOiBPYnNlcnZhYmxlPEJyZWFkY3J1bWJbXT4gfCBQcm9taXNlPEJyZWFkY3J1bWJbXT4gfCBCcmVhZGNydW1iW10ge1xyXG4gICAgY29uc3QgZGF0YSA9IHJvdXRlLnJvdXRlQ29uZmlnLmRhdGE7XHJcbiAgICBjb25zdCBwYXRoID0gdGhpcy5nZXRGdWxsUGF0aChyb3V0ZSk7XHJcbiAgICBjb25zdCByYXdUZXh0ID0gdHlwZW9mIGRhdGEuYnJlYWRjcnVtYnMgPT09ICdzdHJpbmcnID8gZGF0YS5icmVhZGNydW1icyA6IGRhdGEuYnJlYWRjcnVtYnMudGV4dCB8fCBkYXRhLnRleHQgfHwgcGF0aDtcclxuXHJcbiAgICByZXR1cm4gb2YoW1xyXG4gICAgICB7XHJcbiAgICAgICAgcGF0aDogcGF0aCxcclxuICAgICAgICB0ZXh0OiB0aGlzLnN0cmluZ0Zvcm1hdChyYXdUZXh0LCByb3V0ZS5kYXRhKVxyXG4gICAgICB9XHJcbiAgICBdKTtcclxuICB9XHJcblxyXG4gIGdldEZ1bGxQYXRoKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHJlbGF0aXZlUGF0aCA9IChzZWdtZW50czogVXJsU2VnbWVudFtdKSA9PiBzZWdtZW50cy5yZWR1Y2UoKGEsIHYpID0+IChhICs9ICcvJyArIHYucGF0aCksICcnKTtcclxuICAgIGNvbnN0IGZ1bGxQYXRoID0gKHJvdXRlczogQWN0aXZhdGVkUm91dGVTbmFwc2hvdFtdKSA9PiByb3V0ZXMucmVkdWNlKChhLCB2KSA9PiAoYSArPSByZWxhdGl2ZVBhdGgodi51cmwpKSwgJycpO1xyXG4gICAgcmV0dXJuIGZ1bGxQYXRoKHJvdXRlLnBhdGhGcm9tUm9vdCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0cmluZ0Zvcm1hdCh0ZW1wbGF0ZVN0cmluZzogc3RyaW5nLCBiaW5kaW5nOiBhbnkpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgY29tcGlsZWQgPSB0ZW1wbGF0ZSh0ZW1wbGF0ZVN0cmluZyk7XHJcbiAgICByZXR1cm4gY29tcGlsZWQoYmluZGluZyk7XHJcbiAgfVxyXG59XHJcbiJdfQ==