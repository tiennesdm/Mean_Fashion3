/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';
import { Observable, BehaviorSubject, of, concat, from } from 'rxjs';
import { PpBreadcrumbsResolver } from './breadcrumbs.resolver';
import { filter, mergeMap, distinct, toArray, first } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
var PpBreadcrumbsService = /** @class */ (function () {
    function PpBreadcrumbsService(router, route, injector) {
        var _this = this;
        this.router = router;
        this.injector = injector;
        this.breadcrumbs = new BehaviorSubject([]);
        this.defaultResolver = new PpBreadcrumbsResolver();
        this.router.events.pipe(filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x instanceof NavigationEnd; }))).subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.resolveCrumbs(router.routerState.snapshot.root)
                .pipe(mergeMap((/**
             * @param {?} breadcrumbs
             * @return {?}
             */
            function (breadcrumbs) { return breadcrumbs; })), distinct((/**
             * @param {?} breadcrumb
             * @return {?}
             */
            function (breadcrumb) { return breadcrumb.text; })), toArray(), mergeMap((/**
             * @param {?} breadcrumbs
             * @return {?}
             */
            function (breadcrumbs) {
                return _this.postProcess ? _this.wrapIntoObservable(_this.postProcess(breadcrumbs)).pipe(first()) : of(breadcrumbs);
            })))
                .subscribe((/**
             * @param {?} breadcrumbs
             * @return {?}
             */
            function (breadcrumbs) {
                _this.breadcrumbs.next(breadcrumbs);
            }));
        }));
    }
    Object.defineProperty(PpBreadcrumbsService.prototype, "crumbs$", {
        get: /**
         * @return {?}
         */
        function () {
            return this.breadcrumbs;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} route
     * @return {?}
     */
    PpBreadcrumbsService.prototype.resolveCrumbs = /**
     * @private
     * @param {?} route
     * @return {?}
     */
    function (route) {
        /** @type {?} */
        var crumbs$ = of([]);
        /** @type {?} */
        var data = route.routeConfig && route.routeConfig.data;
        if (data && data.breadcrumbs) {
            /** @type {?} */
            var resolver = data.breadcrumbs.prototype instanceof PpBreadcrumbsResolver ? this.injector.get(data.breadcrumbs) : this.defaultResolver;
            /** @type {?} */
            var result = resolver.resolve(route, this.router.routerState.snapshot);
            crumbs$ = this.wrapIntoObservable(result).pipe(first());
        }
        return route.firstChild ? concat(crumbs$, this.resolveCrumbs(route.firstChild)) : crumbs$;
    };
    /**
     * @private
     * @template T
     * @param {?} value
     * @return {?}
     */
    PpBreadcrumbsService.prototype.wrapIntoObservable = /**
     * @private
     * @template T
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value instanceof Observable ? value : this.isPromise(value) ? from(Promise.resolve(value)) : of((/** @type {?} */ (value)));
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PpBreadcrumbsService.prototype.isPromise = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value && typeof value.then === 'function';
    };
    PpBreadcrumbsService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PpBreadcrumbsService.ctorParameters = function () { return [
        { type: Router },
        { type: ActivatedRoute },
        { type: Injector }
    ]; };
    /** @nocollapse */ PpBreadcrumbsService.ngInjectableDef = i0.defineInjectable({ factory: function PpBreadcrumbsService_Factory() { return new PpBreadcrumbsService(i0.inject(i1.Router), i0.inject(i1.ActivatedRoute), i0.inject(i0.INJECTOR)); }, token: PpBreadcrumbsService, providedIn: "root" });
    return PpBreadcrumbsService;
}());
export { PpBreadcrumbsService };
if (false) {
    /** @type {?} */
    PpBreadcrumbsService.prototype.postProcess;
    /**
     * @type {?}
     * @private
     */
    PpBreadcrumbsService.prototype.breadcrumbs;
    /**
     * @type {?}
     * @private
     */
    PpBreadcrumbsService.prototype.defaultResolver;
    /**
     * @type {?}
     * @private
     */
    PpBreadcrumbsService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    PpBreadcrumbsService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3BwLWJyZWFkY3J1bWJzLyIsInNvdXJjZXMiOlsibGliL2JyZWFkY3J1bWJzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxjQUFjLEVBQTBCLGFBQWEsRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRyxPQUFPLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVyRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFHNUU7SUFjRSw4QkFBb0IsTUFBYyxFQUFFLEtBQXFCLEVBQVUsUUFBa0I7UUFBckYsaUJBZUM7UUFmbUIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFpQyxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBUDdFLGdCQUFXLEdBQUcsSUFBSSxlQUFlLENBQWUsRUFBRSxDQUFDLENBQUM7UUFDcEQsb0JBQWUsR0FBRyxJQUFJLHFCQUFxQixFQUFFLENBQUM7UUFPcEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU07Ozs7UUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsWUFBWSxhQUFhLEVBQTFCLENBQTBCLEVBQUMsQ0FBQyxDQUFDLFNBQVM7Ozs7UUFBQyxVQUFDLEtBQW9CO1lBQzlGLEtBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO2lCQUNqRCxJQUFJLENBQ0gsUUFB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IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlLCBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBOYXZpZ2F0aW9uRW5kLCBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBCZWhhdmlvclN1YmplY3QsIG9mLCBjb25jYXQsIGZyb20gfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IFBwQnJlYWRjcnVtYnNSZXNvbHZlciB9IGZyb20gJy4vYnJlYWRjcnVtYnMucmVzb2x2ZXInO1xyXG5pbXBvcnQgeyBmaWx0ZXIsIG1lcmdlTWFwLCBkaXN0aW5jdCwgdG9BcnJheSwgZmlyc3QgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEJyZWFkY3J1bWIgfSBmcm9tICcuL2JyZWFkY3J1bWInO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUHBCcmVhZGNydW1ic1NlcnZpY2Uge1xyXG5cclxuICBwb3N0UHJvY2VzczogKGNydW1iczogQnJlYWRjcnVtYltdKSA9PiBQcm9taXNlPEJyZWFkY3J1bWJbXT4gfCBPYnNlcnZhYmxlPEJyZWFkY3J1bWJbXT4gfCBCcmVhZGNydW1iW107XHJcblxyXG4gIHByaXZhdGUgYnJlYWRjcnVtYnMgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PEJyZWFkY3J1bWJbXT4oW10pO1xyXG4gIHByaXZhdGUgZGVmYXVsdFJlc29sdmVyID0gbmV3IFBwQnJlYWRjcnVtYnNSZXNvbHZlcigpO1xyXG5cclxuICBnZXQgY3J1bWJzJCgpOiBPYnNlcnZhYmxlPEJyZWFkY3J1bWJbXT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuYnJlYWRjcnVtYnM7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJvdXRlcjogUm91dGVyLCByb3V0ZTogQWN0aXZhdGVkUm91dGUsIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgICB0aGlzLnJvdXRlci5ldmVudHMucGlwZShmaWx0ZXIoeCA9PiB4IGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZCkpLnN1YnNjcmliZSgoZXZlbnQ6IE5hdmlnYXRpb25FbmQpID0+IHtcclxuICAgICAgdGhpcy5yZXNvbHZlQ3J1bWJzKHJvdXRlci5yb3V0ZXJTdGF0ZS5zbmFwc2hvdC5yb290KVxyXG4gICAgICAgIC5waXBlKFxyXG4gICAgICAgICAgbWVyZ2VNYXAoYnJlYWRjcnVtYnMgPT4gYnJlYWRjcnVtYnMpLFxyXG4gICAgICAgICAgZGlzdGluY3QoYnJlYWRjcnVtYiA9PiBicmVhZGNydW1iLnRleHQpLFxyXG4gICAgICAgICAgdG9BcnJheSgpLFxyXG4gICAgICAgICAgbWVyZ2VNYXAoYnJlYWRjcnVtYnMgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wb3N0UHJvY2VzcyA/IHRoaXMud3JhcEludG9PYnNlcnZhYmxlKHRoaXMucG9zdFByb2Nlc3MoYnJlYWRjcnVtYnMpKS5waXBlKGZpcnN0KCkpIDogb2YoYnJlYWRjcnVtYnMpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICApXHJcbiAgICAgICAgLnN1YnNjcmliZShicmVhZGNydW1icyA9PiB7XHJcbiAgICAgICAgICB0aGlzLmJyZWFkY3J1bWJzLm5leHQoYnJlYWRjcnVtYnMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlc29sdmVDcnVtYnMocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpOiBPYnNlcnZhYmxlPEJyZWFkY3J1bWJbXT4ge1xyXG4gICAgbGV0IGNydW1icyQ6IE9ic2VydmFibGU8QnJlYWRjcnVtYltdPiA9IG9mKFtdKTtcclxuICAgIGNvbnN0IGRhdGEgPSByb3V0ZS5yb3V0ZUNvbmZpZyAmJiByb3V0ZS5yb3V0ZUNvbmZpZy5kYXRhO1xyXG5cclxuICAgIGlmIChkYXRhICYmIGRhdGEuYnJlYWRjcnVtYnMpIHtcclxuICAgICAgY29uc3QgcmVzb2x2ZXI6IFBwQnJlYWRjcnVtYnNSZXNvbHZlciA9XHJcbiAgICAgICAgZGF0YS5icmVhZGNydW1icy5wcm90b3R5cGUgaW5zdGFuY2VvZiBQcEJyZWFkY3J1bWJzUmVzb2x2ZXIgPyB0aGlzLmluamVjdG9yLmdldChkYXRhLmJyZWFkY3J1bWJzKSA6IHRoaXMuZGVmYXVsdFJlc29sdmVyO1xyXG5cclxuICAgICAgY29uc3QgcmVzdWx0ID0gcmVzb2x2ZXIucmVzb2x2ZShyb3V0ZSwgdGhpcy5yb3V0ZXIucm91dGVyU3RhdGUuc25hcHNob3QpO1xyXG4gICAgICBjcnVtYnMkID0gdGhpcy53cmFwSW50b09ic2VydmFibGU8QnJlYWRjcnVtYltdPihyZXN1bHQpLnBpcGUoZmlyc3QoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJvdXRlLmZpcnN0Q2hpbGQgPyBjb25jYXQoY3J1bWJzJCwgdGhpcy5yZXNvbHZlQ3J1bWJzKHJvdXRlLmZpcnN0Q2hpbGQpKSA6IGNydW1icyQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHdyYXBJbnRvT2JzZXJ2YWJsZTxUPih2YWx1ZTogVCB8IFByb21pc2U8VD4gfCBPYnNlcnZhYmxlPFQ+KTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBPYnNlcnZhYmxlID8gdmFsdWUgOiB0aGlzLmlzUHJvbWlzZSh2YWx1ZSkgPyBmcm9tKFByb21pc2UucmVzb2x2ZSh2YWx1ZSkpIDogb2YodmFsdWUgYXMgVCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGlzUHJvbWlzZSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbic7XHJcbiAgfVxyXG59XHJcbiJdfQ==