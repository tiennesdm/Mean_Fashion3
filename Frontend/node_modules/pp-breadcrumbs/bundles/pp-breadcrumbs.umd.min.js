!function(r,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("rxjs"),require("lodash"),require("rxjs/operators"),require("@angular/core"),require("@angular/router"),require("@angular/common")):"function"==typeof define&&define.amd?define("pp-breadcrumbs",["exports","rxjs","lodash","rxjs/operators","@angular/core","@angular/router","@angular/common"],e):e(r["pp-breadcrumbs"]={},r.rxjs,r.lodash,r.rxjs.operators,r.ng.core,r.ng.router,r.ng.common)}(this,function(r,s,t,o,e,u,n){"use strict";t.templateSettings.interpolate=/{{([\s\S]+?)}}/g;var i=function(){function r(){}return r.prototype.resolve=function(r,e){var t=r.routeConfig.data,n=this.getFullPath(r),o="string"==typeof t.breadcrumbs?t.breadcrumbs:t.breadcrumbs.text||t.text||n;return s.of([{path:n,text:this.stringFormat(o,r.data)}])},r.prototype.getFullPath=function(r){return r.pathFromRoot.reduce(function(r,e){return r+e.url.reduce(function(r,e){return r+"/"+e.path},"")},"")},r.prototype.stringFormat=function(r,e){return t.template(r)(e)},r.decorators=[{type:e.Injectable}],r}(),a=function(){function r(e,r,t){var n=this;this.router=e,this.injector=t,this.breadcrumbs=new s.BehaviorSubject([]),this.defaultResolver=new i,this.router.events.pipe(o.filter(function(r){return r instanceof u.NavigationEnd})).subscribe(function(r){n.resolveCrumbs(e.routerState.snapshot.root).pipe(o.mergeMap(function(r){return r}),o.distinct(function(r){return r.text}),o.toArray(),o.mergeMap(function(r){return n.postProcess?n.wrapIntoObservable(n.postProcess(r)).pipe(o.first()):s.of(r)})).subscribe(function(r){n.breadcrumbs.next(r)})})}return Object.defineProperty(r.prototype,"crumbs$",{get:function(){return this.breadcrumbs},enumerable:!0,configurable:!0}),r.prototype.resolveCrumbs=function(r){var e=s.of([]),t=r.routeConfig&&r.routeConfig.data;if(t&&t.breadcrumbs){var n=(t.breadcrumbs.prototype instanceof i?this.injector.get(t.breadcrumbs):this.defaultResolver).resolve(r,this.router.routerState.snapshot);e=this.wrapIntoObservable(n).pipe(o.first())}return r.firstChild?s.concat(e,this.resolveCrumbs(r.firstChild)):e},r.prototype.wrapIntoObservable=function(r){return r instanceof s.Observable?r:this.isPromise(r)?s.from(Promise.resolve(r)):s.of(r)},r.prototype.isPromise=function(r){return r&&"function"==typeof r.then},r.decorators=[{type:e.Injectable,args:[{providedIn:"root"}]}],r.ctorParameters=function(){return[{type:u.Router},{type:u.ActivatedRoute},{type:e.Injector}]},r.ngInjectableDef=e.defineInjectable({factory:function(){return new r(e.inject(u.Router),e.inject(u.ActivatedRoute),e.inject(e.INJECTOR))},token:r,providedIn:"root"}),r}(),c=function(){function r(r){this.service=r,this.subscriptions=[]}return r.prototype.ngOnInit=function(){var e=this;this.subscriptions.push(this.service.crumbs$.subscribe(function(r){e.crumbs=r}))},r.prototype.ngOnDestroy=function(){this.subscriptions.forEach(function(r){return r.unsubscribe()})},r.decorators=[{type:e.Component,args:[{selector:"pp-breadcrumbs",template:'<ol *ngIf="crumbs.length" class="breadcrumb">\r\n  <li *ngFor="let crumb of crumbs; let first = first; let last = last" [ngClass]="{ \'active\': last }" class="breadcrumb-item">\r\n    <a *ngIf="!last; else lastBreadcrumb" [routerLink]="crumb.path" [innerHTML]="crumb.text"></a>\r\n    <ng-template #lastBreadcrumb>\r\n      <span [innerHTML]="crumb.text"></span>\r\n    </ng-template>\r\n  </li>\r\n</ol>\r\n',styles:[""]}]}],r.ctorParameters=function(){return[{type:a}]},r}(),p=function(){function r(){}return r.decorators=[{type:e.NgModule,args:[{declarations:[c],imports:[n.CommonModule,u.RouterModule],exports:[c]}]}],r}();r.PpBreadcrumbsService=a,r.PpBreadcrumbsComponent=c,r.PpBreadcrumbsResolver=i,r.PpBreadcrumbsModule=p,Object.defineProperty(r,"__esModule",{value:!0})});
//# sourceMappingURL=pp-breadcrumbs.umd.min.js.map