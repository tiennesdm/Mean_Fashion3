{"version":3,"sources":["ng://pp-breadcrumbs/lib/breadcrumbs.resolver.ts","ng://pp-breadcrumbs/lib/breadcrumbs.service.ts","ng://pp-breadcrumbs/lib/breadcrumbs.component.ts","ng://pp-breadcrumbs/lib/breadcrumbs.module.ts"],"names":["lodash","templateSettings","interpolate","PpBreadcrumbsResolver","prototype","resolve","route","state","data","routeConfig","path","this","getFullPath","rawText","breadcrumbs","text","of","stringFormat","pathFromRoot","reduce","a","v","url","templateString","binding","template","compiled","Injectable","PpBreadcrumbsService","router","injector","_this","BehaviorSubject","defaultResolver","events","pipe","filter","x","NavigationEnd","subscribe","event","resolveCrumbs","routerState","snapshot","root","mergeMap","distinct","breadcrumb","toArray","postProcess","wrapIntoObservable","first","next","Object","defineProperty","crumbs$","result","get","firstChild","concat","value","Observable","isPromise","from","Promise","then","args","providedIn","Router","ActivatedRoute","Injector","PpBreadcrumbsComponent","service","subscriptions","ngOnInit","push","crumbs","ngOnDestroy","forEach","unsubscribe","Component","selector","PpBreadcrumbsModule","NgModule","declarations","imports","CommonModule","RouterModule","exports"],"mappings":"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","sourcesContent":["import { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, UrlSegment } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Breadcrumb } from './breadcrumb';\r\nimport { Injectable } from '@angular/core';\r\nimport { template, templateSettings } from 'lodash';\r\n\r\ntemplateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\r\n\r\n@Injectable()\r\nexport class PpBreadcrumbsResolver implements Resolve<Breadcrumb[]> {\r\n\r\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Breadcrumb[]> | Promise<Breadcrumb[]> | Breadcrumb[] {\r\n    const data = route.routeConfig.data;\r\n    const path = this.getFullPath(route);\r\n    const rawText = typeof data.breadcrumbs === 'string' ? data.breadcrumbs : data.breadcrumbs.text || data.text || path;\r\n\r\n    return of([\r\n      {\r\n        path: path,\r\n        text: this.stringFormat(rawText, route.data)\r\n      }\r\n    ]);\r\n  }\r\n\r\n  getFullPath(route: ActivatedRouteSnapshot): string {\r\n    const relativePath = (segments: UrlSegment[]) => segments.reduce((a, v) => (a += '/' + v.path), '');\r\n    const fullPath = (routes: ActivatedRouteSnapshot[]) => routes.reduce((a, v) => (a += relativePath(v.url)), '');\r\n    return fullPath(route.pathFromRoot);\r\n  }\r\n\r\n  private stringFormat(templateString: string, binding: any): string {\r\n    const compiled = template(templateString);\r\n    return compiled(binding);\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { ActivatedRoute, ActivatedRouteSnapshot, NavigationEnd, Router } from '@angular/router';\r\nimport { Observable, BehaviorSubject, of, concat, from } from 'rxjs';\r\n\r\nimport { PpBreadcrumbsResolver } from './breadcrumbs.resolver';\r\nimport { filter, mergeMap, distinct, toArray, first } from 'rxjs/operators';\r\nimport { Breadcrumb } from './breadcrumb';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PpBreadcrumbsService {\r\n\r\n  postProcess: (crumbs: Breadcrumb[]) => Promise<Breadcrumb[]> | Observable<Breadcrumb[]> | Breadcrumb[];\r\n\r\n  private breadcrumbs = new BehaviorSubject<Breadcrumb[]>([]);\r\n  private defaultResolver = new PpBreadcrumbsResolver();\r\n\r\n  get crumbs$(): Observable<Breadcrumb[]> {\r\n    return this.breadcrumbs;\r\n  }\r\n\r\n  constructor(private router: Router, route: ActivatedRoute, private injector: Injector) {\r\n    this.router.events.pipe(filter(x => x instanceof NavigationEnd)).subscribe((event: NavigationEnd) => {\r\n      this.resolveCrumbs(router.routerState.snapshot.root)\r\n        .pipe(\r\n          mergeMap(breadcrumbs => breadcrumbs),\r\n          distinct(breadcrumb => breadcrumb.text),\r\n          toArray(),\r\n          mergeMap(breadcrumbs => {\r\n            return this.postProcess ? this.wrapIntoObservable(this.postProcess(breadcrumbs)).pipe(first()) : of(breadcrumbs);\r\n          })\r\n        )\r\n        .subscribe(breadcrumbs => {\r\n          this.breadcrumbs.next(breadcrumbs);\r\n        });\r\n    });\r\n  }\r\n\r\n  private resolveCrumbs(route: ActivatedRouteSnapshot): Observable<Breadcrumb[]> {\r\n    let crumbs$: Observable<Breadcrumb[]> = of([]);\r\n    const data = route.routeConfig && route.routeConfig.data;\r\n\r\n    if (data && data.breadcrumbs) {\r\n      const resolver: PpBreadcrumbsResolver =\r\n        data.breadcrumbs.prototype instanceof PpBreadcrumbsResolver ? this.injector.get(data.breadcrumbs) : this.defaultResolver;\r\n\r\n      const result = resolver.resolve(route, this.router.routerState.snapshot);\r\n      crumbs$ = this.wrapIntoObservable<Breadcrumb[]>(result).pipe(first());\r\n    }\r\n\r\n    return route.firstChild ? concat(crumbs$, this.resolveCrumbs(route.firstChild)) : crumbs$;\r\n  }\r\n\r\n  private wrapIntoObservable<T>(value: T | Promise<T> | Observable<T>): Observable<T> {\r\n    return value instanceof Observable ? value : this.isPromise(value) ? from(Promise.resolve(value)) : of(value as T);\r\n  }\r\n\r\n  private isPromise(value: any): boolean {\r\n    return value && typeof value.then === 'function';\r\n  }\r\n}\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { Breadcrumb } from './breadcrumb';\r\nimport { PpBreadcrumbsService } from './breadcrumbs.service';\r\n\r\n@Component({\r\n  selector: 'pp-breadcrumbs',\r\n  templateUrl: './breadcrumbs.component.html',\r\n  styleUrls: ['./breadcrumbs.component.scss']\r\n})\r\nexport class PpBreadcrumbsComponent implements OnInit, OnDestroy {\r\n  crumbs: Breadcrumb[];\r\n  subscriptions: Subscription[] = [];\r\n\r\n  constructor(public service: PpBreadcrumbsService) {}\r\n\r\n  public ngOnInit(): void {\r\n    this.subscriptions.push(\r\n      this.service.crumbs$.subscribe(x => {\r\n        this.crumbs = x;\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach(x => x.unsubscribe());\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport {RouterModule} from '@angular/router';\nimport {CommonModule} from '@angular/common';\n\nimport { PpBreadcrumbsComponent } from './breadcrumbs.component';\n\n@NgModule({\n  declarations: [PpBreadcrumbsComponent],\n  imports: [CommonModule, RouterModule],\n  exports: [PpBreadcrumbsComponent]\n})\nexport class PpBreadcrumbsModule { }\n"]}