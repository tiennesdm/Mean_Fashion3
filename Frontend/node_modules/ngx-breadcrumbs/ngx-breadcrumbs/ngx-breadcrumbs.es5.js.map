{"version":3,"file":"ngx-breadcrumbs.es5.js","sources":["~/ngx-breadcrumbs/ngx-breadcrumbs/ngx-breadcrumbs.ts","~/ngx-breadcrumbs/ngx-breadcrumbs/src/mc-breadcrumbs.module.ts","~/ngx-breadcrumbs/ngx-breadcrumbs/src/component/mc-breadcrumbs.component.ts","~/ngx-breadcrumbs/ngx-breadcrumbs/src/service/mc-breadcrumbs.service.ts","~/ngx-breadcrumbs/ngx-breadcrumbs/src/service/mc-breadcrumbs.resolver.ts","~/ngx-breadcrumbs/ngx-breadcrumbs/src/service/mc-breadcrumbs.config.ts","~/ngx-breadcrumbs/ngx-breadcrumbs/src/mc-breadcrumbs.shared.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {McBreadcrumbsComponent,McBreadcrumbsService,McBreadcrumbsConfig,IBreadcrumb,McBreadcrumbsResolver,McBreadcrumbsModule} from './index';\n","import { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { McBreadcrumbsService } from './service/mc-breadcrumbs.service';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { McBreadcrumbsComponent } from './component/mc-breadcrumbs.component';\nimport { McBreadcrumbsConfig } from './service/mc-breadcrumbs.config';\nexport class McBreadcrumbsModule {\n/**\n * @return {?}\n */\nstatic forRoot() : ModuleWithProviders {\n    return {\n      ngModule: McBreadcrumbsModule,\n      providers: [\n        McBreadcrumbsService,\n        McBreadcrumbsConfig\n      ]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, RouterModule],\n  declarations: [ McBreadcrumbsComponent ],\n  exports: [ McBreadcrumbsComponent ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction McBreadcrumbsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMcBreadcrumbsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMcBreadcrumbsModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Observable } from 'rxjs/Observable';\nimport { McBreadcrumbsService } from '../service/mc-breadcrumbs.service';\n\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { IBreadcrumb } from '../mc-breadcrumbs.shared';\nimport { Subscription } from 'rxjs/Subscription';\nexport class McBreadcrumbsComponent implements OnInit, OnDestroy {\n/**\n * @param {?} service\n */\nconstructor(public service: McBreadcrumbsService) {}\n\n  crumbs: IBreadcrumb[];\n\n  subscriptions = new Array<Subscription>();\n/**\n * @return {?}\n */\npublic ngOnInit(): void {\n\n    const /** @type {?} */ s = this.service.crumbs$.subscribe((x) => {\n      this.crumbs = x;\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.subscriptions.forEach((x) => x.unsubscribe());\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'mc-breadcrumbs',\n  template: `\n    <ol *ngIf=\"crumbs.length\" class=\"breadcrumb\">\n      <li *ngFor=\"let crumb of crumbs; let last = last\" [ngClass]=\"{ 'active': last }\" class=\"breadcrumb-item\">\n        <a *ngIf=\"!last\" [routerLink]=\"crumb.path\">{{ crumb.text }}</a>\n        <span *ngIf=\"last\">{{ crumb.text }}</span>\n      </li>\n    </ol>\n  `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: McBreadcrumbsService, },\n];\n}\n\nfunction McBreadcrumbsComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nMcBreadcrumbsComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMcBreadcrumbsComponent.ctorParameters;\n/** @type {?} */\nMcBreadcrumbsComponent.prototype.crumbs;\n/** @type {?} */\nMcBreadcrumbsComponent.prototype.subscriptions;\n/** @type {?} */\nMcBreadcrumbsComponent.prototype.service;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Injector } from '@angular/core';\n\nimport { ActivatedRoute, ActivatedRouteSnapshot, NavigationEnd, Router, RouterState } from '@angular/router';\n\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport'rxjs/add/observable/of';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/concat';\nimport'rxjs/add/operator/mergeMap';\nimport'rxjs/add/operator/toArray';\nimport'rxjs/add/operator/distinct';\nimport'rxjs/add/operator/first';\n\nimport { IBreadcrumb, stringFormat, wrapIntoObservable } from '../mc-breadcrumbs.shared';\nimport { McBreadcrumbsConfig } from './mc-breadcrumbs.config';\nimport { McBreadcrumbsResolver } from './mc-breadcrumbs.resolver';\nexport class McBreadcrumbsService {\nprivate _breadcrumbs = new BehaviorSubject<IBreadcrumb[]>([]);\nprivate _defaultResolver = new McBreadcrumbsResolver();\n/**\n * @param {?} _router\n * @param {?} route\n * @param {?} _config\n * @param {?} _injector\n */\nconstructor(private _router: Router, route: ActivatedRoute,\nprivate _config: McBreadcrumbsConfig,\nprivate _injector: Injector) {\n\n    this._router.events\n      .filter((x) => x instanceof NavigationEnd)\n      .subscribe((event: NavigationEnd) => {\n\n        const route = _router.routerState.snapshot.root;\n\n        //Observable.of(this._config.prefixCrumbs)\n        this._resolveCrumbs(route)\n          .flatMap((x) => x)\n          .distinct((x) => x.text)\n          .toArray()\n          .flatMap((x) => {\n            if(this._config.postProcess) {\n              const y = this._config.postProcess(x);\n              return wrapIntoObservable<IBreadcrumb[]>(y).first();\n            } else {\n              return Observable.of(x);\n            }\n          })\n          .subscribe((x) => {\n            this._breadcrumbs.next(x);\n          });\n      });\n  }\n/**\n * @return {?}\n */\nget crumbs$(): Observable<IBreadcrumb[]> {\n    return this._breadcrumbs;\n  }\n/**\n * @param {?} route\n * @return {?}\n */\nprivate _resolveCrumbs(route: ActivatedRouteSnapshot)\n    : Observable<IBreadcrumb[]> {\n\n    let /** @type {?} */ crumbs$: Observable<IBreadcrumb[]>;\n\n    const /** @type {?} */ data = route.routeConfig &&\n      route.routeConfig.data;\n\n    if (data && data.breadcrumbs) {\n\n      let /** @type {?} */ resolver : McBreadcrumbsResolver;\n\n      if(data.breadcrumbs.prototype instanceof McBreadcrumbsResolver) {\n        resolver = this._injector.get(data.breadcrumbs);\n      } else {\n        resolver = this._defaultResolver;\n      }\n\n      let /** @type {?} */ result = resolver.resolve(route, this._router.routerState.snapshot);\n      crumbs$ = wrapIntoObservable<IBreadcrumb[]>(result).first();\n\n    } else {\n      crumbs$ = Observable.of([]);\n    }\n\n    if (route.firstChild) {\n      crumbs$ = crumbs$.concat(this._resolveCrumbs(route.firstChild));\n    }\n\n    return crumbs$;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Router, },\n{type: ActivatedRoute, },\n{type: McBreadcrumbsConfig, },\n{type: Injector, },\n];\n}\n\nfunction McBreadcrumbsService_tsickle_Closure_declarations() {\n/** @type {?} */\nMcBreadcrumbsService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMcBreadcrumbsService.ctorParameters;\n/** @type {?} */\nMcBreadcrumbsService.prototype._breadcrumbs;\n/** @type {?} */\nMcBreadcrumbsService.prototype._defaultResolver;\n/** @type {?} */\nMcBreadcrumbsService.prototype._router;\n/** @type {?} */\nMcBreadcrumbsService.prototype._config;\n/** @type {?} */\nMcBreadcrumbsService.prototype._injector;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, UrlSegment } from '@angular/router';\nimport { IBreadcrumb, stringFormat } from '../mc-breadcrumbs.shared';\nimport { Observable } from 'rxjs/Observable';\nexport class McBreadcrumbsResolver implements Resolve<IBreadcrumb[]> {\n/**\n * @param {?} route\n * @param {?} state\n * @return {?}\n */\npublic resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n     : Observable<IBreadcrumb[]> | Promise<IBreadcrumb[]> | IBreadcrumb[] {\n\n    const /** @type {?} */ data = route.routeConfig.data;\n    const /** @type {?} */ path = this.getFullPath(route);\n\n    let /** @type {?} */ text = typeof (data.breadcrumbs) === 'string' ? data.breadcrumbs : data.breadcrumbs.text || data.text || path;\n    text = stringFormat(text, route.data);\n\n    const /** @type {?} */ crumbs : IBreadcrumb[] = [{\n      text: text,\n      path: path\n    }];\n\n    return Observable.of(crumbs);\n  }\n/**\n * @param {?} route\n * @return {?}\n */\npublic getFullPath(route: ActivatedRouteSnapshot) : string {\n    const /** @type {?} */ relativePath = (segments: UrlSegment[]) => segments.reduce((a, v) => a += '/' + v.path, '');\n    const /** @type {?} */ fullPath = (routes: ActivatedRouteSnapshot[]) => routes.reduce((a, v) => a += relativePath(v.url), '');\n\n    return fullPath(route.pathFromRoot)\n  }\n}\n","import { Observable } from 'rxjs/Observable';\n\nimport { Injectable } from '@angular/core';\nimport { IBreadcrumb } from '../mc-breadcrumbs.shared';\n\nexport interface IPostProcessFunc {\n  (crumbs: IBreadcrumb[]) : Promise<IBreadcrumb[]> | Observable<IBreadcrumb[]> | IBreadcrumb[];\n}\nexport class McBreadcrumbsConfig {\n  postProcess : IPostProcessFunc\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction McBreadcrumbsConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nMcBreadcrumbsConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMcBreadcrumbsConfig.ctorParameters;\n/** @type {?} */\nMcBreadcrumbsConfig.prototype.postProcess;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\n\nimport'rxjs/add/observable/fromPromise';\n\n// Angular makes it impossible to make modules optional :(\n\n// try {\n//   const _ = r('lodash');\n//   _template = _.template;\n//   _templateSettings = _.templateSetting\n// } catch (e) {\n//   try {\n//     _template = r('lodash.template');\n//     _templateSettings = r('lodash.templatesettings');\n//   } catch (e) {\n//     _template = (y) => (x) => y;\n//     _templateSettings = {};\n//   }\n// } finally {\n//   _templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n// }\n\n\nimport * as template from 'lodash.template';\nimport * as templateSettings from 'lodash.templatesettings';\n\nconst /** @type {?} */ _ = {\n  template: template,\n  templateSettings: templateSettings\n};\n\n_.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n\nexport interface IBreadcrumb {\n  text: string,\n  path: string\n}\n\ndeclare var require: any;\n/**\n * @param {?} module\n * @return {?}\n */\nfunction r(module) {\n  return require(`${name}`);\n}\n/**\n * @param {?} template\n * @param {?} binding\n * @return {?}\n */\nexport function stringFormat(template: string, binding: any): string {\n  let /** @type {?} */ compiled = _.template(template);\n  return compiled(binding);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function isPromise(value: any): boolean {\n  return value && (typeof value.then === 'function');\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nexport function wrapIntoObservable<T>(value: T | Promise<T> | Observable<T>)\n  : Observable<T> {\n\n  if (value instanceof Observable)\n    return value;\n\n  if (isPromise(value)) {\n    return Observable.fromPromise(Promise.resolve(value));\n  }\n\n  return Observable.of( /** @type {?} */((value as T)));\n}\n"],"names":["Observable","BehaviorSubject","template"],"mappings":"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"}