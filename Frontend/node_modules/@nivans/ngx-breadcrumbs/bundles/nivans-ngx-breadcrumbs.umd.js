(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/router'), require('rxjs/internal/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@nivans/ngx-breadcrumbs', ['exports', '@angular/core', 'rxjs', '@angular/router', 'rxjs/internal/operators', '@angular/common'], factory) :
    (factory((global.nivans = global.nivans || {}, global.nivans['ngx-breadcrumbs'] = {}),global.ng.core,global.rxjs,global.ng.router,global.rxjs['internal/operators'],global.ng.common));
}(this, (function (exports,i0,rxjs,router,operators,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxBreadcrumbsService = (function () {
        function NgxBreadcrumbsService() {
            this.dynamicCrumbs = new rxjs.Subject();
        }
        /**
         * @param {?} title
         * @param {?=} component
         * @return {?}
         */
        NgxBreadcrumbsService.prototype.customCrumbTitle = /**
         * @param {?} title
         * @param {?=} component
         * @return {?}
         */
            function (title, component) {
                var /** @type {?} */ crumb = { label: title, component: component };
                this.dynamicCrumbs.next(crumb);
            };
        NgxBreadcrumbsService.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] },
        ];
        /** @nocollapse */
        NgxBreadcrumbsService.ctorParameters = function () { return []; };
        /** @nocollapse */ NgxBreadcrumbsService.ngInjectableDef = i0.defineInjectable({ factory: function NgxBreadcrumbsService_Factory() { return new NgxBreadcrumbsService(); }, token: NgxBreadcrumbsService, providedIn: "root" });
        return NgxBreadcrumbsService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxBreadcrumbsComponent = (function () {
        function NgxBreadcrumbsComponent(router$$1, activatedRoute, service) {
            this.router = router$$1;
            this.activatedRoute = activatedRoute;
            this.service = service;
            this.customCrumbs = [];
            this.show = true;
        }
        /**
         * @return {?}
         */
        NgxBreadcrumbsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.router.events
                    .pipe(operators.filter(function (event) { return event instanceof router.NavigationEnd; }))
                    .subscribe(function () {
                    _this.breadcrumbs = _this.handleRoute(_this.activatedRoute.root);
                });
                this.service.dynamicCrumbs.subscribe(function (crumb) {
                    _this.customCrumbs[crumb.component] = crumb;
                    _this.breadcrumbs = _this.handleRoute(_this.activatedRoute.root);
                });
            };
        /**
         * @param {?} route
         * @param {?=} breadcrumbs
         * @return {?}
         */
        NgxBreadcrumbsComponent.prototype.handleRoute = /**
         * @param {?} route
         * @param {?=} breadcrumbs
         * @return {?}
         */
            function (route, breadcrumbs) {
                if (breadcrumbs === void 0) {
                    breadcrumbs = [];
                }
                if (breadcrumbs.length === 0) {
                    breadcrumbs.push(this.getCrumbFromRoute(this.getHomeRoute()));
                }
                if (route.routeConfig !== null &&
                    'data' in route.routeConfig &&
                    'breadcrumb' in route.routeConfig.data &&
                    !route.routeConfig.data["isHome"]) {
                    var /** @type {?} */ urlPrefix = breadcrumbs[breadcrumbs.length - 1] ? breadcrumbs[breadcrumbs.length - 1].url : '';
                    var /** @type {?} */ customCrumb = route.routeConfig.component && this.customCrumbs[route.routeConfig.component.name];
                    var /** @type {?} */ defaultCrumb = this.getCrumbFromRoute(route.routeConfig, urlPrefix);
                    var /** @type {?} */ crumb = customCrumb ? Object.assign(defaultCrumb, customCrumb) : defaultCrumb;
                    breadcrumbs = __spread(breadcrumbs, [crumb]);
                }
                if (route.firstChild) {
                    return this.handleRoute(route.firstChild, breadcrumbs);
                }
                delete (breadcrumbs[breadcrumbs.length - 1].url);
                this.show = breadcrumbs[breadcrumbs.length - 1].show;
                return breadcrumbs;
            };
        /**
         * @return {?}
         */
        NgxBreadcrumbsComponent.prototype.getHomeRoute = /**
         * @return {?}
         */
            function () {
                return this.router.config.filter(function (crumb) { return crumb.data && crumb.data["isHome"]; })[0];
            };
        /**
         * @param {?} route
         * @param {?=} urlPrefix
         * @return {?}
         */
        NgxBreadcrumbsComponent.prototype.getCrumbFromRoute = /**
         * @param {?} route
         * @param {?=} urlPrefix
         * @return {?}
         */
            function (route, urlPrefix) {
                if (urlPrefix === void 0) {
                    urlPrefix = null;
                }
                return {
                    label: route.data && route.data["breadcrumb"],
                    url: urlPrefix ? urlPrefix + "/" + route.path : route.path || '/',
                    component: route.component && route.component.name,
                    icon: route.data["icon"],
                    show: route.data.hasOwnProperty('show') ? route.data["show"] : true
                };
            };
        NgxBreadcrumbsComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nvs-ngx-breadcrumbs',
                        template: "\n    <nav aria-label=\"breadcrumb\"\n         *ngIf=\"show\">\n      <ol class=\"breadcrumb\">\n        <li *ngFor=\"let breadcrumb of breadcrumbs\"\n            class=\"breadcrumb-item\"\n            [ngClass]=\"{'active': !breadcrumb.url}\">\n          <a [routerLink]=\"[breadcrumb.url]\"\n             *ngIf=\"breadcrumb.url\">\n            <i class=\"{{ breadcrumb.icon }}\" *ngIf=\"breadcrumb.icon\"></i>\n            {{ breadcrumb.label }}\n          </a>\n          <span *ngIf=\"!breadcrumb.url\">\n            <i class=\"{{ breadcrumb.icon }}\" *ngIf=\"breadcrumb.icon\"></i>\n            {{ breadcrumb.label }}\n          </span>\n        </li>\n      </ol>\n    </nav>\n  ",
                        styles: []
                    },] },
        ];
        /** @nocollapse */
        NgxBreadcrumbsComponent.ctorParameters = function () {
            return [
                { type: router.Router },
                { type: router.ActivatedRoute },
                { type: NgxBreadcrumbsService }
            ];
        };
        return NgxBreadcrumbsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxBreadcrumbsModule = (function () {
        function NgxBreadcrumbsModule() {
        }
        NgxBreadcrumbsModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            router.RouterModule
                        ],
                        declarations: [NgxBreadcrumbsComponent],
                        exports: [NgxBreadcrumbsComponent],
                        providers: [NgxBreadcrumbsService]
                    },] },
        ];
        return NgxBreadcrumbsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.NgxBreadcrumbsService = NgxBreadcrumbsService;
    exports.NgxBreadcrumbsComponent = NgxBreadcrumbsComponent;
    exports.NgxBreadcrumbsModule = NgxBreadcrumbsModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,