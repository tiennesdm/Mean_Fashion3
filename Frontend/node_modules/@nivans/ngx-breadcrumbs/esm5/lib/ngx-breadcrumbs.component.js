/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';
import { filter } from 'rxjs/internal/operators';
import { NgxBreadcrumbsService } from './ngx-breadcrumbs.service';
var NgxBreadcrumbsComponent = /** @class */ (function () {
    function NgxBreadcrumbsComponent(router, activatedRoute, service) {
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.service = service;
        this.customCrumbs = [];
        this.show = true;
    }
    /**
     * @return {?}
     */
    NgxBreadcrumbsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.router.events
            .pipe(filter(function (event) { return event instanceof NavigationEnd; }))
            .subscribe(function () {
            _this.breadcrumbs = _this.handleRoute(_this.activatedRoute.root);
        });
        this.service.dynamicCrumbs.subscribe(function (crumb) {
            _this.customCrumbs[crumb.component] = crumb;
            _this.breadcrumbs = _this.handleRoute(_this.activatedRoute.root);
        });
    };
    /**
     * @param {?} route
     * @param {?=} breadcrumbs
     * @return {?}
     */
    NgxBreadcrumbsComponent.prototype.handleRoute = /**
     * @param {?} route
     * @param {?=} breadcrumbs
     * @return {?}
     */
    function (route, breadcrumbs) {
        if (breadcrumbs === void 0) { breadcrumbs = []; }
        if (breadcrumbs.length === 0) {
            breadcrumbs.push(this.getCrumbFromRoute(this.getHomeRoute()));
        }
        if (route.routeConfig !== null &&
            'data' in route.routeConfig &&
            'breadcrumb' in route.routeConfig.data &&
            !route.routeConfig.data["isHome"]) {
            var /** @type {?} */ urlPrefix = breadcrumbs[breadcrumbs.length - 1] ? breadcrumbs[breadcrumbs.length - 1].url : '';
            var /** @type {?} */ customCrumb = route.routeConfig.component && this.customCrumbs[route.routeConfig.component.name];
            var /** @type {?} */ defaultCrumb = this.getCrumbFromRoute(route.routeConfig, urlPrefix);
            var /** @type {?} */ crumb = customCrumb ? Object.assign(defaultCrumb, customCrumb) : defaultCrumb;
            breadcrumbs = tslib_1.__spread(breadcrumbs, [crumb]);
        }
        if (route.firstChild) {
            return this.handleRoute(route.firstChild, breadcrumbs);
        }
        delete (breadcrumbs[breadcrumbs.length - 1].url);
        this.show = breadcrumbs[breadcrumbs.length - 1].show;
        return breadcrumbs;
    };
    /**
     * @return {?}
     */
    NgxBreadcrumbsComponent.prototype.getHomeRoute = /**
     * @return {?}
     */
    function () {
        return this.router.config.filter(function (crumb) { return crumb.data && crumb.data["isHome"]; })[0];
    };
    /**
     * @param {?} route
     * @param {?=} urlPrefix
     * @return {?}
     */
    NgxBreadcrumbsComponent.prototype.getCrumbFromRoute = /**
     * @param {?} route
     * @param {?=} urlPrefix
     * @return {?}
     */
    function (route, urlPrefix) {
        if (urlPrefix === void 0) { urlPrefix = null; }
        return {
            label: route.data && route.data["breadcrumb"],
            url: urlPrefix ? urlPrefix + "/" + route.path : route.path || '/',
            component: route.component && route.component.name,
            icon: route.data["icon"],
            show: route.data.hasOwnProperty('show') ? route.data["show"] : true
        };
    };
    NgxBreadcrumbsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nvs-ngx-breadcrumbs',
                    template: "\n    <nav aria-label=\"breadcrumb\"\n         *ngIf=\"show\">\n      <ol class=\"breadcrumb\">\n        <li *ngFor=\"let breadcrumb of breadcrumbs\"\n            class=\"breadcrumb-item\"\n            [ngClass]=\"{'active': !breadcrumb.url}\">\n          <a [routerLink]=\"[breadcrumb.url]\"\n             *ngIf=\"breadcrumb.url\">\n            <i class=\"{{ breadcrumb.icon }}\" *ngIf=\"breadcrumb.icon\"></i>\n            {{ breadcrumb.label }}\n          </a>\n          <span *ngIf=\"!breadcrumb.url\">\n            <i class=\"{{ breadcrumb.icon }}\" *ngIf=\"breadcrumb.icon\"></i>\n            {{ breadcrumb.label }}\n          </span>\n        </li>\n      </ol>\n    </nav>\n  ",
                    styles: []
                },] },
    ];
    /** @nocollapse */
    NgxBreadcrumbsComponent.ctorParameters = function () { return [
        { type: Router },
        { type: ActivatedRoute },
        { type: NgxBreadcrumbsService }
    ]; };
    return NgxBreadcrumbsComponent;
}());
export { NgxBreadcrumbsComponent };
function NgxBreadcrumbsComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    NgxBreadcrumbsComponent.prototype.customCrumbs;
    /** @type {?} */
    NgxBreadcrumbsComponent.prototype.breadcrumbs;
    /** @type {?} */
    NgxBreadcrumbsComponent.prototype.show;
    /** @type {?} */
    NgxBreadcrumbsComponent.prototype.router;
    /** @type {?} */
    NgxBreadcrumbsComponent.prototype.activatedRoute;
    /** @type {?} */
    NgxBreadcrumbsComponent.prototype.service;
}

//# sourceMappingURL=data:application/json;base64,