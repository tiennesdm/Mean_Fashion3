/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component } from '@angular/core';
import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';
import { filter } from 'rxjs/internal/operators';
import { NgxBreadcrumbsService } from './ngx-breadcrumbs.service';
export class NgxBreadcrumbsComponent {
    /**
     * @param {?} router
     * @param {?} activatedRoute
     * @param {?} service
     */
    constructor(router, activatedRoute, service) {
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.service = service;
        this.customCrumbs = [];
        this.show = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.router.events
            .pipe(filter(event => event instanceof NavigationEnd))
            .subscribe(() => {
            this.breadcrumbs = this.handleRoute(this.activatedRoute.root);
        });
        this.service.dynamicCrumbs.subscribe(crumb => {
            this.customCrumbs[crumb.component] = crumb;
            this.breadcrumbs = this.handleRoute(this.activatedRoute.root);
        });
    }
    /**
     * @param {?} route
     * @param {?=} breadcrumbs
     * @return {?}
     */
    handleRoute(route, breadcrumbs = []) {
        if (breadcrumbs.length === 0) {
            breadcrumbs.push(this.getCrumbFromRoute(this.getHomeRoute()));
        }
        if (route.routeConfig !== null &&
            'data' in route.routeConfig &&
            'breadcrumb' in route.routeConfig.data &&
            !route.routeConfig.data["isHome"]) {
            const /** @type {?} */ urlPrefix = breadcrumbs[breadcrumbs.length - 1] ? breadcrumbs[breadcrumbs.length - 1].url : '';
            const /** @type {?} */ customCrumb = route.routeConfig.component && this.customCrumbs[route.routeConfig.component.name];
            const /** @type {?} */ defaultCrumb = this.getCrumbFromRoute(route.routeConfig, urlPrefix);
            const /** @type {?} */ crumb = customCrumb ? Object.assign(defaultCrumb, customCrumb) : defaultCrumb;
            breadcrumbs = [...breadcrumbs, crumb];
        }
        if (route.firstChild) {
            return this.handleRoute(route.firstChild, breadcrumbs);
        }
        delete (breadcrumbs[breadcrumbs.length - 1].url);
        this.show = breadcrumbs[breadcrumbs.length - 1].show;
        return breadcrumbs;
    }
    /**
     * @return {?}
     */
    getHomeRoute() {
        return this.router.config.filter(crumb => crumb.data && crumb.data["isHome"])[0];
    }
    /**
     * @param {?} route
     * @param {?=} urlPrefix
     * @return {?}
     */
    getCrumbFromRoute(route, urlPrefix = null) {
        return {
            label: route.data && route.data["breadcrumb"],
            url: urlPrefix ? `${urlPrefix}/${route.path}` : route.path || '/',
            component: route.component && route.component.name,
            icon: route.data["icon"],
            show: route.data.hasOwnProperty('show') ? route.data["show"] : true
        };
    }
}
NgxBreadcrumbsComponent.decorators = [
    { type: Component, args: [{
                selector: 'nvs-ngx-breadcrumbs',
                template: `
    <nav aria-label="breadcrumb"
         *ngIf="show">
      <ol class="breadcrumb">
        <li *ngFor="let breadcrumb of breadcrumbs"
            class="breadcrumb-item"
            [ngClass]="{'active': !breadcrumb.url}">
          <a [routerLink]="[breadcrumb.url]"
             *ngIf="breadcrumb.url">
            <i class="{{ breadcrumb.icon }}" *ngIf="breadcrumb.icon"></i>
            {{ breadcrumb.label }}
          </a>
          <span *ngIf="!breadcrumb.url">
            <i class="{{ breadcrumb.icon }}" *ngIf="breadcrumb.icon"></i>
            {{ breadcrumb.label }}
          </span>
        </li>
      </ol>
    </nav>
  `,
                styles: []
            },] },
];
/** @nocollapse */
NgxBreadcrumbsComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: NgxBreadcrumbsService }
];
function NgxBreadcrumbsComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    NgxBreadcrumbsComponent.prototype.customCrumbs;
    /** @type {?} */
    NgxBreadcrumbsComponent.prototype.breadcrumbs;
    /** @type {?} */
    NgxBreadcrumbsComponent.prototype.show;
    /** @type {?} */
    NgxBreadcrumbsComponent.prototype.router;
    /** @type {?} */
    NgxBreadcrumbsComponent.prototype.activatedRoute;
    /** @type {?} */
    NgxBreadcrumbsComponent.prototype.service;
}

//# sourceMappingURL=data:application/json;base64,