import { Injectable, NgModule, Component, defineInjectable } from '@angular/core';
import { Subject } from 'rxjs';
import { ActivatedRoute, NavigationEnd, Router, RouterModule } from '@angular/router';
import { filter } from 'rxjs/internal/operators';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxBreadcrumbsService {
    constructor() {
        this.dynamicCrumbs = new Subject();
    }
    /**
     * @param {?} title
     * @param {?=} component
     * @return {?}
     */
    customCrumbTitle(title, component) {
        const /** @type {?} */ crumb = { label: title, component: component };
        this.dynamicCrumbs.next(crumb);
    }
}
NgxBreadcrumbsService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
/** @nocollapse */
NgxBreadcrumbsService.ctorParameters = () => [];
/** @nocollapse */ NgxBreadcrumbsService.ngInjectableDef = defineInjectable({ factory: function NgxBreadcrumbsService_Factory() { return new NgxBreadcrumbsService(); }, token: NgxBreadcrumbsService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxBreadcrumbsComponent {
    /**
     * @param {?} router
     * @param {?} activatedRoute
     * @param {?} service
     */
    constructor(router, activatedRoute, service) {
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.service = service;
        this.customCrumbs = [];
        this.show = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.router.events
            .pipe(filter(event => event instanceof NavigationEnd))
            .subscribe(() => {
            this.breadcrumbs = this.handleRoute(this.activatedRoute.root);
        });
        this.service.dynamicCrumbs.subscribe(crumb => {
            this.customCrumbs[crumb.component] = crumb;
            this.breadcrumbs = this.handleRoute(this.activatedRoute.root);
        });
    }
    /**
     * @param {?} route
     * @param {?=} breadcrumbs
     * @return {?}
     */
    handleRoute(route, breadcrumbs = []) {
        if (breadcrumbs.length === 0) {
            breadcrumbs.push(this.getCrumbFromRoute(this.getHomeRoute()));
        }
        if (route.routeConfig !== null &&
            'data' in route.routeConfig &&
            'breadcrumb' in route.routeConfig.data &&
            !route.routeConfig.data["isHome"]) {
            const /** @type {?} */ urlPrefix = breadcrumbs[breadcrumbs.length - 1] ? breadcrumbs[breadcrumbs.length - 1].url : '';
            const /** @type {?} */ customCrumb = route.routeConfig.component && this.customCrumbs[route.routeConfig.component.name];
            const /** @type {?} */ defaultCrumb = this.getCrumbFromRoute(route.routeConfig, urlPrefix);
            const /** @type {?} */ crumb = customCrumb ? Object.assign(defaultCrumb, customCrumb) : defaultCrumb;
            breadcrumbs = [...breadcrumbs, crumb];
        }
        if (route.firstChild) {
            return this.handleRoute(route.firstChild, breadcrumbs);
        }
        delete (breadcrumbs[breadcrumbs.length - 1].url);
        this.show = breadcrumbs[breadcrumbs.length - 1].show;
        return breadcrumbs;
    }
    /**
     * @return {?}
     */
    getHomeRoute() {
        return this.router.config.filter(crumb => crumb.data && crumb.data["isHome"])[0];
    }
    /**
     * @param {?} route
     * @param {?=} urlPrefix
     * @return {?}
     */
    getCrumbFromRoute(route, urlPrefix = null) {
        return {
            label: route.data && route.data["breadcrumb"],
            url: urlPrefix ? `${urlPrefix}/${route.path}` : route.path || '/',
            component: route.component && route.component.name,
            icon: route.data["icon"],
            show: route.data.hasOwnProperty('show') ? route.data["show"] : true
        };
    }
}
NgxBreadcrumbsComponent.decorators = [
    { type: Component, args: [{
                selector: 'nvs-ngx-breadcrumbs',
                template: `
    <nav aria-label="breadcrumb"
         *ngIf="show">
      <ol class="breadcrumb">
        <li *ngFor="let breadcrumb of breadcrumbs"
            class="breadcrumb-item"
            [ngClass]="{'active': !breadcrumb.url}">
          <a [routerLink]="[breadcrumb.url]"
             *ngIf="breadcrumb.url">
            <i class="{{ breadcrumb.icon }}" *ngIf="breadcrumb.icon"></i>
            {{ breadcrumb.label }}
          </a>
          <span *ngIf="!breadcrumb.url">
            <i class="{{ breadcrumb.icon }}" *ngIf="breadcrumb.icon"></i>
            {{ breadcrumb.label }}
          </span>
        </li>
      </ol>
    </nav>
  `,
                styles: []
            },] },
];
/** @nocollapse */
NgxBreadcrumbsComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: NgxBreadcrumbsService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxBreadcrumbsModule {
}
NgxBreadcrumbsModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    RouterModule
                ],
                declarations: [NgxBreadcrumbsComponent],
                exports: [NgxBreadcrumbsComponent],
                providers: [NgxBreadcrumbsService]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NgxBreadcrumbsService, NgxBreadcrumbsComponent, NgxBreadcrumbsModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,