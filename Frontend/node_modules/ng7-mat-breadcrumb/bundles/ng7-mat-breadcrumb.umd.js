(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators'), require('rxjs/internal/operators'), require('@angular/core'), require('@angular/router'), require('@angular/common'), require('@angular/platform-browser/animations'), require('@angular/material/toolbar'), require('@angular/material/list')) :
    typeof define === 'function' && define.amd ? define('ng7-mat-breadcrumb', ['exports', 'rxjs', 'rxjs/operators', 'rxjs/internal/operators', '@angular/core', '@angular/router', '@angular/common', '@angular/platform-browser/animations', '@angular/material/toolbar', '@angular/material/list'], factory) :
    (factory((global['ng7-mat-breadcrumb'] = {}),global.rxjs,global.rxjs.operators,global.rxjs['internal/operators'],global.ng.core,global.ng.router,global.ng.common,global.ng.platformBrowser.animations,global.ng.material.toolbar,global.ng.material.list));
}(this, (function (exports,rxjs,operators,operators$1,i0,router,common,animations,toolbar,list) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Ng7MatBreadcrumbService = /** @class */ (function () {
        function Ng7MatBreadcrumbService() {
            this.breadcrumbLabels = new rxjs.BehaviorSubject([]);
        }
        /**
         * @param {?} labels
         * @return {?}
         */
        Ng7MatBreadcrumbService.prototype.updateBreadcrumbLabels = /**
         * @param {?} labels
         * @return {?}
         */
            function (labels) {
                this.breadcrumbLabels.next(labels);
            };
        Ng7MatBreadcrumbService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        Ng7MatBreadcrumbService.ctorParameters = function () { return []; };
        /** @nocollapse */ Ng7MatBreadcrumbService.ngInjectableDef = i0.defineInjectable({ factory: function Ng7MatBreadcrumbService_Factory() { return new Ng7MatBreadcrumbService(); }, token: Ng7MatBreadcrumbService, providedIn: "root" });
        return Ng7MatBreadcrumbService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Ng7MatBreadcrumbComponent = /** @class */ (function () {
        function Ng7MatBreadcrumbComponent(activatedRoute, router$$1, ng7MatBreadcrumbService) {
            this.activatedRoute = activatedRoute;
            this.router = router$$1;
            this.ng7MatBreadcrumbService = ng7MatBreadcrumbService;
            this.breadcrumb = [];
            this.breadCrumbData();
        }
        /**
         * @return {?}
         */
        Ng7MatBreadcrumbComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.ng7MatBreadcrumbService.breadcrumbLabels.subscribe(( /**
                 * @param {?} labelData
                 * @return {?}
                 */function (labelData) {
                    var _loop_1 = function (label) {
                        if (labelData.hasOwnProperty(label)) {
                            _this.breadcrumb.map(( /**
                             * @param {?} crumb
                             * @return {?}
                             */function (crumb) {
                                var e_1, _a;
                                /** @type {?} */
                                var labelParams = crumb.label.match(/[^{{]+(?=\}})/g);
                                if (labelParams) {
                                    try {
                                        for (var labelParams_1 = __values(labelParams), labelParams_1_1 = labelParams_1.next(); !labelParams_1_1.done; labelParams_1_1 = labelParams_1.next()) {
                                            var labelParam = labelParams_1_1.value;
                                            /** @type {?} */
                                            var dyanmicData = labelData[label];
                                            if (labelParam === label) {
                                                crumb.label = crumb.label.replace('{{' + labelParam + '}}', dyanmicData);
                                            }
                                        }
                                    }
                                    catch (e_1_1) {
                                        e_1 = { error: e_1_1 };
                                    }
                                    finally {
                                        try {
                                            if (labelParams_1_1 && !labelParams_1_1.done && (_a = labelParams_1.return))
                                                _a.call(labelParams_1);
                                        }
                                        finally {
                                            if (e_1)
                                                throw e_1.error;
                                        }
                                    }
                                }
                            }));
                        }
                    };
                    for (var label in labelData) {
                        _loop_1(label);
                    }
                }));
            };
        /**
         * @return {?}
         */
        Ng7MatBreadcrumbComponent.prototype.breadCrumbData = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.router.events
                    .pipe(operators.filter(( /**
             * @param {?} event
             * @return {?}
             */function (event) { return event instanceof router.NavigationEnd; })))
                    .pipe(operators$1.map(( /**
             * @return {?}
             */function () { return _this.activatedRoute; })))
                    .pipe(operators$1.map(( /**
             * @param {?} route
             * @return {?}
             */function (route) {
                    while (route.firstChild) {
                        route = route.firstChild;
                    }
                    return route;
                })))
                    .pipe(operators.filter(( /**
             * @param {?} route
             * @return {?}
             */function (route) { return route.outlet === router.PRIMARY_OUTLET; })))
                    .subscribe(( /**
             * @param {?} route
             * @return {?}
             */function (route) {
                    if (route.snapshot.data.breadcrumb) {
                        /** @type {?} */
                        var breadcrumb = (JSON.parse(JSON.stringify(route.snapshot.data.breadcrumb)));
                        breadcrumb.map(( /**
                         * @param {?} crumb
                         * @return {?}
                         */function (crumb) {
                            var e_2, _a, e_3, _b;
                            /** @type {?} */
                            var urlChunks = crumb.url.split('/');
                            try {
                                for (var urlChunks_1 = __values(urlChunks), urlChunks_1_1 = urlChunks_1.next(); !urlChunks_1_1.done; urlChunks_1_1 = urlChunks_1.next()) {
                                    var chunk = urlChunks_1_1.value;
                                    if (chunk.includes(':')) {
                                        /** @type {?} */
                                        var paramID = chunk.replace(':', '');
                                        /** @type {?} */
                                        var routerParamID = route.snapshot.params[paramID];
                                        crumb.url = crumb.url.replace(":" + paramID, routerParamID);
                                    }
                                }
                            }
                            catch (e_2_1) {
                                e_2 = { error: e_2_1 };
                            }
                            finally {
                                try {
                                    if (urlChunks_1_1 && !urlChunks_1_1.done && (_a = urlChunks_1.return))
                                        _a.call(urlChunks_1);
                                }
                                finally {
                                    if (e_2)
                                        throw e_2.error;
                                }
                            }
                            /** @type {?} */
                            var labelParams = crumb.label.match(/[^{{]+(?=\}})/g);
                            if (labelParams) {
                                try {
                                    for (var labelParams_2 = __values(labelParams), labelParams_2_1 = labelParams_2.next(); !labelParams_2_1.done; labelParams_2_1 = labelParams_2.next()) {
                                        var labelParam = labelParams_2_1.value;
                                        /** @type {?} */
                                        var routerParamID = route.snapshot.params[labelParam.trim()];
                                        if (routerParamID) {
                                            crumb.label = crumb.label.replace('{{' + labelParam + '}}', routerParamID);
                                        }
                                    }
                                }
                                catch (e_3_1) {
                                    e_3 = { error: e_3_1 };
                                }
                                finally {
                                    try {
                                        if (labelParams_2_1 && !labelParams_2_1.done && (_b = labelParams_2.return))
                                            _b.call(labelParams_2);
                                    }
                                    finally {
                                        if (e_3)
                                            throw e_3.error;
                                    }
                                }
                            }
                        }));
                        _this.breadcrumb = breadcrumb;
                    }
                    else {
                        _this.breadcrumb = [];
                    }
                }));
            };
        Ng7MatBreadcrumbComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-ng7-mat-breadcrumb',
                        template: "<mat-toolbar class=\"mat-bread-crumb\">\n    <mat-list class=\"mat-bread-crumb-list\" *ngIf=\"breadcrumb.length\">\n        <mat-list-item>\n            <span class=\"mat-bread-crumb-spacer\">\n                <span *ngFor=\"let item of breadcrumb; let i = index\">\n                    <a *ngIf=\"item?.url\" [routerLink]=\"item?.url\" class=\"mat-bread-crumb-list-item\">{{ item.label }}</a>\n                    <span *ngIf=\"!item?.url\" class=\"mat-bread-crumb-list-item\">{{ item.label }}</span>\n                    <span *ngIf=\"breadcrumb.length !== i+1\"> / </span>\n                </span>\n            </span>\n        </mat-list-item>\n    </mat-list>\n</mat-toolbar>",
                        styles: [".mat-bread-crumb{height:30px;background-color:#f1efeb}.mat-bread-crumb-list{padding-bottom:10px}.mat-bread-crumb-list-item{font-size:15px}.mat-bread-crumb-spacer{margin-left:-20px}"]
                    }] }
        ];
        /** @nocollapse */
        Ng7MatBreadcrumbComponent.ctorParameters = function () {
            return [
                { type: router.ActivatedRoute },
                { type: router.Router },
                { type: Ng7MatBreadcrumbService }
            ];
        };
        return Ng7MatBreadcrumbComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Ng7MatBreadcrumbModule = /** @class */ (function () {
        function Ng7MatBreadcrumbModule() {
        }
        Ng7MatBreadcrumbModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [Ng7MatBreadcrumbComponent],
                        imports: [
                            router.RouterModule,
                            common.CommonModule,
                            animations.BrowserAnimationsModule,
                            toolbar.MatToolbarModule,
                            list.MatListModule
                        ],
                        exports: [Ng7MatBreadcrumbComponent]
                    },] }
        ];
        return Ng7MatBreadcrumbModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.Ng7MatBreadcrumbService = Ng7MatBreadcrumbService;
    exports.Ng7MatBreadcrumbComponent = Ng7MatBreadcrumbComponent;
    exports.Ng7MatBreadcrumbModule = Ng7MatBreadcrumbModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ng7-mat-breadcrumb.umd.js.map