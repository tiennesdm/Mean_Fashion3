/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import { ActivatedRoute, Router, NavigationEnd, PRIMARY_OUTLET } from '@angular/router';
import { filter } from 'rxjs/operators';
import { map } from 'rxjs/internal/operators';
import { Ng7MatBreadcrumbService } from './ng7-mat-breadcrumb.service';
export class Ng7MatBreadcrumbComponent {
    /**
     * @param {?} activatedRoute
     * @param {?} router
     * @param {?} ng7MatBreadcrumbService
     */
    constructor(activatedRoute, router, ng7MatBreadcrumbService) {
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.ng7MatBreadcrumbService = ng7MatBreadcrumbService;
        this.breadcrumb = [];
        this.breadCrumbData();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ng7MatBreadcrumbService.breadcrumbLabels.subscribe((/**
         * @param {?} labelData
         * @return {?}
         */
        (labelData) => {
            for (const label in labelData) {
                if (labelData.hasOwnProperty(label)) {
                    this.breadcrumb.map((/**
                     * @param {?} crumb
                     * @return {?}
                     */
                    (crumb) => {
                        /** @type {?} */
                        const labelParams = crumb.label.match(/[^{{]+(?=\}})/g);
                        if (labelParams) {
                            for (const labelParam of labelParams) {
                                /** @type {?} */
                                const dyanmicData = labelData[label];
                                if (labelParam === label) {
                                    crumb.label = crumb.label.replace('{{' + labelParam + '}}', dyanmicData);
                                }
                            }
                        }
                    }));
                }
            }
        }));
    }
    /**
     * @return {?}
     */
    breadCrumbData() {
        this.router.events
            .pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        event => event instanceof NavigationEnd)))
            .pipe(map((/**
         * @return {?}
         */
        () => this.activatedRoute)))
            .pipe(map((/**
         * @param {?} route
         * @return {?}
         */
        (route) => {
            while (route.firstChild) {
                route = route.firstChild;
            }
            return route;
        })))
            .pipe(filter((/**
         * @param {?} route
         * @return {?}
         */
        route => route.outlet === PRIMARY_OUTLET)))
            .subscribe((/**
         * @param {?} route
         * @return {?}
         */
        route => {
            if (route.snapshot.data.breadcrumb) {
                /** @type {?} */
                const breadcrumb = (JSON.parse(JSON.stringify(route.snapshot.data.breadcrumb)));
                breadcrumb.map((/**
                 * @param {?} crumb
                 * @return {?}
                 */
                (crumb) => {
                    /** @type {?} */
                    const urlChunks = crumb.url.split('/');
                    for (const chunk of urlChunks) {
                        if (chunk.includes(':')) {
                            /** @type {?} */
                            const paramID = chunk.replace(':', '');
                            /** @type {?} */
                            const routerParamID = route.snapshot.params[paramID];
                            crumb.url = crumb.url.replace(`:${paramID}`, routerParamID);
                        }
                    }
                    /** @type {?} */
                    const labelParams = crumb.label.match(/[^{{]+(?=\}})/g);
                    if (labelParams) {
                        for (const labelParam of labelParams) {
                            /** @type {?} */
                            const routerParamID = route.snapshot.params[labelParam.trim()];
                            if (routerParamID) {
                                crumb.label = crumb.label.replace('{{' + labelParam + '}}', routerParamID);
                            }
                            else {
                                // crumb.label = crumb.label.replace('{{' + labelParam + '}}', '');
                            }
                        }
                    }
                }));
                this.breadcrumb = breadcrumb;
            }
            else {
                this.breadcrumb = [];
            }
        }));
    }
}
Ng7MatBreadcrumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-ng7-mat-breadcrumb',
                template: "<mat-toolbar class=\"mat-bread-crumb\">\n    <mat-list class=\"mat-bread-crumb-list\" *ngIf=\"breadcrumb.length\">\n        <mat-list-item>\n            <span class=\"mat-bread-crumb-spacer\">\n                <span *ngFor=\"let item of breadcrumb; let i = index\">\n                    <a *ngIf=\"item?.url\" [routerLink]=\"item?.url\" class=\"mat-bread-crumb-list-item\">{{ item.label }}</a>\n                    <span *ngIf=\"!item?.url\" class=\"mat-bread-crumb-list-item\">{{ item.label }}</span>\n                    <span *ngIf=\"breadcrumb.length !== i+1\"> / </span>\n                </span>\n            </span>\n        </mat-list-item>\n    </mat-list>\n</mat-toolbar>",
                styles: [".mat-bread-crumb{height:30px;background-color:#f1efeb}.mat-bread-crumb-list{padding-bottom:10px}.mat-bread-crumb-list-item{font-size:15px}.mat-bread-crumb-spacer{margin-left:-20px}"]
            }] }
];
/** @nocollapse */
Ng7MatBreadcrumbComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: Router },
    { type: Ng7MatBreadcrumbService }
];
if (false) {
    /** @type {?} */
    Ng7MatBreadcrumbComponent.prototype.breadcrumb;
    /**
     * @type {?}
     * @private
     */
    Ng7MatBreadcrumbComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    Ng7MatBreadcrumbComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    Ng7MatBreadcrumbComponent.prototype.ng7MatBreadcrumbService;
}
//# sourceMappingURL=data:application/json;base64,